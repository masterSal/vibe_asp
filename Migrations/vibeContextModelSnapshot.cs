// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vibe.Models;

namespace Vibe.Migrations
{
    [DbContext(typeof(vibeContext))]
    partial class vibeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Vibe.Models.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CommentedBy")
                        .HasColumnName("commented_by")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("CommentedBy")
                        .HasName("commented_by");

                    b.HasIndex("PostId")
                        .HasName("post_id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Vibe.Models.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("FollowedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("followed_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("Follows")
                        .HasColumnName("follows")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("User")
                        .HasColumnName("user")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("Follows")
                        .HasName("follows");

                    b.HasIndex("User")
                        .HasName("user");

                    b.ToTable("follower");
                });

            modelBuilder.Entity("Vibe.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Hash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hash")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PicLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pic_location")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("UploadedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uploaded_by")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("image");
                });

            modelBuilder.Entity("Vibe.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("From")
                        .HasColumnName("from")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Message1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("message")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("To")
                        .HasColumnName("to")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("viewed")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("From")
                        .HasName("from");

                    b.HasIndex("To")
                        .HasName("to");

                    b.ToTable("message");
                });

            modelBuilder.Entity("Vibe.Models.Plike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("LikedBy")
                        .HasColumnName("liked_by")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("LikedBy")
                        .HasName("liked_by");

                    b.HasIndex("PostId")
                        .HasName("post_id");

                    b.ToTable("plike");
                });

            modelBuilder.Entity("Vibe.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Caption")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("caption")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("ImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("img_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("ImgId")
                        .HasName("img_id");

                    b.HasIndex("Uid")
                        .HasName("uid");

                    b.ToTable("post");
                });

            modelBuilder.Entity("Vibe.Models.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Hash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hash")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PictureLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("picture_location")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("profile_picture");
                });

            modelBuilder.Entity("Vibe.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ChatSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("chat_sound")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("HideProfilePicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hide_profile_picture")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("NotificationEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_email")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("NotificationShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_show")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("NotificationSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_sound")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("ShowBio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("show_bio")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Vibe.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Background")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("background")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Bio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bio")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("full_name")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("password")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("Payment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Skills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skills")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("username")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("phone");

                    b.HasIndex("Picture")
                        .HasName("picture");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Vibe.Models.Comments", b =>
                {
                    b.HasOne("Vibe.Models.Users", "CommentedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("CommentedBy")
                        .HasConstraintName("comments_ibfk_2");

                    b.HasOne("Vibe.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("comments_ibfk_1");
                });

            modelBuilder.Entity("Vibe.Models.Follower", b =>
                {
                    b.HasOne("Vibe.Models.Users", "FollowsNavigation")
                        .WithMany("FollowerFollowsNavigation")
                        .HasForeignKey("Follows")
                        .HasConstraintName("follower_ibfk_2");

                    b.HasOne("Vibe.Models.Users", "UserNavigation")
                        .WithMany("FollowerUserNavigation")
                        .HasForeignKey("User")
                        .HasConstraintName("follower_ibfk_1");
                });

            modelBuilder.Entity("Vibe.Models.Message", b =>
                {
                    b.HasOne("Vibe.Models.Users", "FromNavigation")
                        .WithMany("MessageFromNavigation")
                        .HasForeignKey("From")
                        .HasConstraintName("message_ibfk_1");

                    b.HasOne("Vibe.Models.Users", "ToNavigation")
                        .WithMany("MessageToNavigation")
                        .HasForeignKey("To")
                        .HasConstraintName("message_ibfk_2");
                });

            modelBuilder.Entity("Vibe.Models.Plike", b =>
                {
                    b.HasOne("Vibe.Models.Users", "LikedByNavigation")
                        .WithMany("Plike")
                        .HasForeignKey("LikedBy")
                        .HasConstraintName("plike_ibfk_2");

                    b.HasOne("Vibe.Models.Post", "Post")
                        .WithMany("Plike")
                        .HasForeignKey("PostId")
                        .HasConstraintName("plike_ibfk_1");
                });

            modelBuilder.Entity("Vibe.Models.Post", b =>
                {
                    b.HasOne("Vibe.Models.Image", "Img")
                        .WithMany("Post")
                        .HasForeignKey("ImgId")
                        .HasConstraintName("post_ibfk_1");

                    b.HasOne("Vibe.Models.Users", "U")
                        .WithMany("Post")
                        .HasForeignKey("Uid")
                        .HasConstraintName("post_ibfk_2");
                });

            modelBuilder.Entity("Vibe.Models.ProfilePicture", b =>
                {
                    b.HasOne("Vibe.Models.Users", "User")
                        .WithMany("ProfilePicture")
                        .HasForeignKey("UserId")
                        .HasConstraintName("profile_picture_ibfk_1");
                });

            modelBuilder.Entity("Vibe.Models.Settings", b =>
                {
                    b.HasOne("Vibe.Models.Users", "User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("settings_ibfk_1");
                });

            modelBuilder.Entity("Vibe.Models.Users", b =>
                {
                    b.HasOne("Vibe.Models.ProfilePicture", "PictureNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Picture")
                        .HasConstraintName("users_ibfk_1");
                });
#pragma warning restore 612, 618
        }
    }
}
